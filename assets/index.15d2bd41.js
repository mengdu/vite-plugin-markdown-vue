var s=Object.defineProperty,a=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,t=(a,n,l)=>n in a?s(a,n,{enumerable:!0,configurable:!0,writable:!0,value:l}):a[n]=l;import{o as p,c as e,a as c,r as o,b as i,d as r,t as h,w as d,v as j,e as g,f as m,V as u,g as k,h as f,i as b,j as v,k as y,l as w,m as q,n as x}from"./vendor.e63b3290.js";!function(){const s=document.createElement("link").relList;if(!(s&&s.supports&&s.supports("modulepreload"))){for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver((s=>{for(const n of s)if("childList"===n.type)for(const s of n.addedNodes)"LINK"===s.tagName&&"modulepreload"===s.rel&&a(s)})).observe(document,{childList:!0,subtree:!0})}function a(s){if(s.ep)return;s.ep=!0;const a=function(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerpolicy&&(a.referrerPolicy=s.referrerpolicy),"use-credentials"===s.crossorigin?a.credentials="include":"anonymous"===s.crossorigin?a.credentials="omit":a.credentials="same-origin",a}(s);fetch(s.href,a)}}();var _=(s,a)=>{for(const[n,l]of a)s[n]=l;return s};const D={components:{}},S={class:"markdown content"},C=[c('<h1 id="vite-plugin-markdown-vue" tabindex="-1"><a class="anchor" href="#vite-plugin-markdown-vue"><span class="octicon octicon-link"></span></a> vite-plugin-markdown-vue</h1><p>Vite plugin for converting markdown into Vue components.</p><blockquote><p>Part of the code is copied and modified from <a href="https://github.com/element-plus/element-plus">Element-plus</a>.</p></blockquote><p><a href="docs/docs.md">Docs</a> | <a href="examples/vue">Example</a></p><p><strong>Feature</strong></p><ul><li>✨ Support <code>block demo</code> for writing component cases.</li><li>✨ Support writing JS logic code and style.</li><li>✨ Code block support highlights lines.</li></ul><h3 id="usage" tabindex="-1"><a class="anchor" href="#usage"><span class="octicon octicon-link"></span></a> Usage</h3><ul><li>1、Install</li></ul><pre class="hljs" data-lang="mipsasm"><code>npm <span class="hljs-keyword">install </span>-D vite-plugin-markdown-vue\n<span class="hljs-comment"># or</span>\nyarn <span class="hljs-keyword">add </span>-D vite-plugin-markdown-vue\n</code></pre><ul><li>2、Configure vite</li></ul><pre class="hljs" data-lang="js"><code><span class="hljs-comment">// vite.config.js</span>\n<span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite&#39;</span>\n<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@vitejs/plugin-vue&#39;</span>\n<span class="hljs-keyword">import</span> markdown <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite-plugin-markdown-vue&#39;</span>\n\n<span class="hljs-comment">// https://vitejs.dev/config/</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({\n  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">markdown</span>(), <span class="hljs-title function_">vue</span>({\n    <span class="hljs-attr">include</span>: [<span class="hljs-regexp">/\\.vue$/</span>, <span class="hljs-regexp">/\\.md$/</span>]\n  })]\n})\n</code></pre><ul><li>3、Define the ‘demo-block’ component and register it with the global.</li></ul><blockquote><p><code>demo-block</code> component use for <code>block demo</code>.</p></blockquote><pre class="hljs" data-lang="html"><code><span class="hljs-comment">&lt;!-- ./components/demo-block.vue --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-block&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;source&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;source&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;meta&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;highlight&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;highlight&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#39;demo-block&#39;</span>\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre><pre class="hljs" data-lang="js"><code><span class="hljs-comment">// main.js</span>\n<span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./App.vue&#39;</span>\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">DemoBlock</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vite-plugin-markdown-vue/components&#39;</span>\n<span class="hljs-comment">// or</span>\n<span class="hljs-comment">// import DemoBlock from &#39;./components/demo-block.vue&#39;</span>\n\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;highlight.js/styles/color-brewer.css&#39;</span>\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)\napp.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#39;demo-block&#39;</span>, <span class="hljs-title class_">DemoBlock</span>) <span class="hljs-comment">// register `demo-block` component.</span>\napp.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#39;#app&#39;</span>)\n</code></pre><p><strong>Demo</strong></p><pre class="hljs" data-lang="html"><code><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./demo.md&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">components</span>: {\n    <span class="hljs-title class_">Demo</span>\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre><h3 id="options" tabindex="-1"><a class="anchor" href="#options"><span class="octicon octicon-link"></span></a> Options</h3><pre class="hljs" data-lang="js"><code><span class="hljs-comment">// vite.config.js</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({\n  <span class="hljs-attr">plugins</span>: [\n    <span class="hljs-title function_">markdown</span>({\n      <span class="hljs-comment">// Class names for the wrapper</span>\n      <span class="hljs-attr">className</span>: <span class="hljs-string">&#39;content&#39;</span>,\n      <span class="hljs-comment">// options for markdown-it</span>\n      <span class="hljs-attr">markdown</span>: {\n        <span class="hljs-comment">// ...</span>\n        <span class="hljs-comment">// init</span>\n        setup (md) {\n          md.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">otherPlugin</span>())\n        }\n      }\n    }), \n    <span class="hljs-title function_">vue</span>({\n      <span class="hljs-attr">include</span>: [<span class="hljs-regexp">/\\.vue$/</span>, <span class="hljs-regexp">/\\.md$/</span>]\n    })\n  ]\n})\n</code></pre>',19)];var T=_(D,[["render",function(s,a,n,l,t,c){return p(),e("section",S,C)}]]);const E={data:()=>({text:"Hello"}),methods:{hanldeShow(){alert(this.text)}}},I={components:{"block-demo-0":function(){const{createVNode:s,openBlock:p,createBlock:e}=u;return((s,p)=>{for(var e in p||(p={}))n.call(p,e)&&t(s,e,p[e]);if(a)for(var e of a(p))l.call(p,e)&&t(s,e,p[e]);return s})({render:function(a,n){return p(),e("div",null,[s("button",{onClick:n[1]||(n[1]=(...s)=>a.onclick&&a.onclick(...s))},"Click me")])}},{methods:{onclick(){alert("Hello")}}})}()}};E.mixins?E.mixins.push(I):E.mixins=[I];const A=E,O={class:"markdown content"},B=i("h3",{id:"use-script",tabindex:"-1"},[i("a",{class:"anchor",href:"#use-script"},[i("span",{class:"octicon octicon-link"})]),r(" Use Script")],-1),N=i("p",null,"Support writing JS logic code on markdown.",-1),H=i("blockquote",null,[i("p",null,[r("Note that only the first "),i("code",null,"script"),r(" tag is applied, and the others will be removed!")])],-1),P={class:"hljs","data-lang":"html"},V=c('<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n<span class="hljs-comment">// This is required if there has `block demo`</span>\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">text</span>: <span class="hljs-string">&#39;Hello&#39;</span>\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    handleShow () {\n      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>)\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 15px; border: solid 1px #dcdfe6;&quot;</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>',7),$=c('<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Input...&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleShow&quot;</span>&gt;</span>Show<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n',11),R={style:{padding:"15px",border:"solid 1px #dcdfe6"}},L=r("  "),M=c('<h3 id="use-style" tabindex="-1"><a class="anchor" href="#use-style"><span class="octicon octicon-link"></span></a> Use Style</h3><p>If you need to define a style, you can use the ‘style’ tag like <code>.vue</code> component.</p><blockquote><p>It is worth noting that only the content of the last <code>style</code> tag is applied.</p></blockquote><pre class="hljs" data-lang="html"><code><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 15px; border: solid 1px #dcdfe6;&quot;</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>Red<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>Blue<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">\n<span class="hljs-selector-class">.red</span> {\n  <span class="hljs-attribute">color</span>: red;\n}\n<span class="hljs-selector-class">.green</span> {\n  <span class="hljs-attribute">color</span>: green;\n}\n<span class="hljs-selector-class">.blue</span> {\n  <span class="hljs-attribute">color</span>: blue;\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre><p style="padding:15px;border:solid 1px #dcdfe6;"><span class="red">Red</span>  <span class="green">Green</span>  <span class="blue">Blue</span>  </p><h3 id="block-demo" tabindex="-1"><a class="anchor" href="#block-demo"><span class="octicon octicon-link"></span></a> Block Demo</h3><p><code>::: demo</code> and <code>:::</code> wrapped blocks are code blocks used to write Vue component cases.</p><blockquote><p>Note that the code block language must declare the <code>html</code> language.</p></blockquote><pre class="hljs" data-lang="markdown"><code>:::demo this is a <span class="hljs-code">`demo`</span>。\n\n<span class="hljs-code">```html\n&lt;template&gt;\n&lt;button @click=&quot;onclick&quot;&gt;Click me&lt;/button&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n  methods: {\n    onclick () {\n      alert(&#39;Hello&#39;)\n    }\n  }\n}\n&lt;/script&gt;\n```</span>\n:::\n</code></pre>',9),U=i("div",null,[i("p",null,[r("this is a "),i("code",null,"demo"),r("。")])],-1),G=i("pre",{class:"hljs","data-lang":"html"},[i("code",null,[i("span",{class:"hljs-tag"},[r("<"),i("span",{class:"hljs-name"},"template"),r(">")]),r("\n"),i("span",{class:"hljs-tag"},[r("<"),i("span",{class:"hljs-name"},"button"),r(" @"),i("span",{class:"hljs-attr"},"click"),r("="),i("span",{class:"hljs-string"},'"onclick"'),r(">")]),r("Click me"),i("span",{class:"hljs-tag"},[r("</"),i("span",{class:"hljs-name"},"button"),r(">")]),r("\n"),i("span",{class:"hljs-tag"},[r("</"),i("span",{class:"hljs-name"},"template"),r(">")]),r("\n"),i("span",{class:"hljs-tag"},[r("<"),i("span",{class:"hljs-name"},"script"),r(">")]),i("span",{class:"language-javascript"},[r("\n"),i("span",{class:"hljs-keyword"},"export"),r(),i("span",{class:"hljs-keyword"},"default"),r(" {\n  "),i("span",{class:"hljs-attr"},"methods"),r(": {\n    onclick () {\n      "),i("span",{class:"hljs-title function_"},"alert"),r("("),i("span",{class:"hljs-string"},"'Hello'"),r(")\n    }\n  }\n}\n")]),i("span",{class:"hljs-tag"},[r("</"),i("span",{class:"hljs-name"},"script"),r(">")]),r("\n")])],-1),z=c('<h3 id="code-block-highlight-lines" tabindex="-1"><a class="anchor" href="#code-block-highlight-lines"><span class="octicon octicon-link"></span></a> Code block highlight lines.</h3><p>The code block highlights the specified lines.</p><p>For example, highlight lines 1, 3, 5-7 and 9.</p><pre class="hljs" data-lang="markdown"><code><span class="hljs-code">```js {1,3,5-7,9}\nvar foo = &quot;hello&quot;\nconst foo2 = true\nlet foo3 = 100\n\nfunction main() {\n  console.log(foo, foo2, foo3)\n}\n\nmain()\n```</span>\n</code></pre><div class="hljs-diff-block"><div class="hljs-lines"><div class="highlighted"> </div><br><div class="highlighted"> </div><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><div class="highlighted"> </div><br></div><pre class="hljs" data-lang="js"><code><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&quot;hello&quot;</span>\n<span class="hljs-keyword">const</span> foo2 = <span class="hljs-literal">true</span>\n<span class="hljs-keyword">let</span> foo3 = <span class="hljs-number">100</span>\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo, foo2, foo3)\n}\n\n<span class="hljs-title function_">main</span>()\n</code></pre></div><h3 id="table" tabindex="-1"><a class="anchor" href="#table"><span class="octicon octicon-link"></span></a> Table</h3><table><thead><tr><th>Props</th><th>Description</th><th>Type</th><th>Optional</th><th>Default</th></tr></thead><tbody><tr><td>size</td><td>Size</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>type</td><td>Type</td><td>string</td><td>primary / success / warning / danger / info / text</td><td>—</td></tr><tr><td>plain</td><td>Is it a simple button</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>native-type</td><td>Native type attribute</td><td>string</td><td>button / submit / reset</td><td>button</td></tr></tbody></table><h3 id="tip-container" tabindex="-1"><a class="anchor" href="#tip-container"><span class="octicon octicon-link"></span></a> Tip Container</h3><p>Support container blocks of <code>:::warning</code>, <code>:::Tip</code>, <code>:::spooler</code>.</p><pre class="hljs" data-lang="markdown"><code>:::warning\nThis is the <span class="hljs-code">`warning`</span> prompt block.\n:::\n\n:::tip\nThis is the <span class="hljs-code">`tip`</span> prompt block.\n:::\n</code></pre><div class="warning"><p>This is the <code>warning</code> prompt block.</p></div><div class="tip"><p>This is the <code>tip</code> prompt block.</p></div><p><strong>Spoiler</strong></p><pre class="hljs" data-lang="markdown"><code>:::spoiler Click me\n\n<span class="hljs-quote">&gt; Hello this is a `spoiler` container.</span>\n:::\n</code></pre><details><summary>Click me</summary><blockquote><p>Hello this is a <code>spoiler</code> container.</p></blockquote></details>',15);const F={data:()=>({tab:"#readme"}),components:{README:T,Docs:_(A,[["render",function(s,a,n,l,t,c){const u=o("block-demo-0"),k=o("demo-block");return p(),e("section",O,[B,N,H,i("pre",P,[i("code",null,[V,r("Input: "+h(s.text),1),$])]),i("div",R,[i("p",null,"Input: "+h(s.text),1),d(i("input",{"onUpdate:modelValue":a[0]||(a[0]=a=>s.text=a),placeholder:"Input..."},null,512),[[j,s.text]]),L,i("button",{onClick:a[1]||(a[1]=(...a)=>s.hanldeShow&&s.hanldeShow(...a))},"Show")]),M,g(k,null,{source:m((()=>[g(u)])),highlight:m((()=>[G])),default:m((()=>[U])),_:1}),z])}]])},mounted(){console.log(location),this.tab=location.hash}},J={class:"container"},K=w(" | "),Q=w("  "),W=v("a",{href:"https://github.com/mengdu/vite-plugin-markdown-vue",target:"_blank",style:{float:"right"}},"Github",-1);var X=_(F,[["render",function(s,a,n,l,t,p){const e=k("Docs"),c=k("README");return f(),b("div",J,[v("p",null,[v("a",{href:"#readme",onClick:a[0]||(a[0]=s=>t.tab="#readme")},"README"),K,v("a",{href:"#docs",onClick:a[1]||(a[1]=s=>t.tab="#docs")},"Docs"),Q,W]),"#docs"===t.tab?(f(),y(e,{key:0})):(f(),y(c,{key:1}))])}]]);const Y={class:"demo-block"},Z={class:"source"},ss={class:"meta"},as={class:"description"},ns={class:"highlight"};var ls=_({name:"demo-block"},[["render",function(s,a,n,l,t,c){return p(),e("div",Y,[i("div",Z,[q(s.$slots,"source")]),i("div",ss,[i("div",as,[q(s.$slots,"default")]),i("div",ns,[q(s.$slots,"highlight")])])])}]]);ls.install=s=>{s.component(ls.name,ls)};const ts=x(X);ts.use(ls),ts.mount("#app");
